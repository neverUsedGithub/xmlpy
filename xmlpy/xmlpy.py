#!/usr/bin/env python3
from datetime import datetime
from .html import Parser
from typing import TYPE_CHECKING
import re
import os

if TYPE_CHECKING:
  from .html import Element

html_elements = [ "<a>", "<abbr>", "<acronym>", "<address>", "<applet>", "<area>", "<article>", "<aside>", "<audio>", "<b>", "<base>", "<basefont>", "<bdi>", "<bdo>", "<big>", "<blockquote>", "<body>", "<br>", "<button>", "<canvas>", "<caption>", "<center>", "<cite>", "<code>", "<col>", "<colgroup>", "<data>", "<datalist>", "<dd>", "<del>", "<details>", "<dfn>", "<dialog>", "<dir>", "<div>", "<dl>", "<dt>", "<em>", "<embed>", "<fieldset>", "<figcaption>", "<figure>", "<font>", "<footer>", "<form>", "<frame>", "<frameset>", "<h1>", "<h2>", "<h3>", "<h4>", "<h5>", "<h6>", "<head>", "<header>", "<hr>", "<html>", "<i>", "<iframe>", "<img>", "<input>", "<ins>", "<kbd>", "<label>", "<legend>", "<li>", "<link>", "<main>", "<map>", "<mark>", "<meta>", "<meter>", "<nav>", "<noframes>", "<noscript>", "<object>", "<ol>", "<optgroup>", "<option>", "<output>", "<p>", "<param>", "<picture>", "<pre>", "<progress>", "<q>", "<rp>", "<rt>", "<ruby>", "<s>", "<samp>", "<script>", "<section>", "<select>", "<small>", "<source>", "<span>", "<strike>", "<strong>", "<style>", "<sub>", "<summary>", "<sup>", "<svg>", "<table>", "<tbody>", "<td>", "<template>", "<textarea>", "<tfoot>", "<th>", "<thead>", "<time>", "<title>", "<tr>", "<track>", "<tt>", "<u>", "<ul>", "<var>", "<video>", "<wbr>" ]
config_factory_regex = re.compile(r"^ *### @xmlpy ([^\n]+)$", re.RegexFlag.MULTILINE)

def get_first_element(string: str):
  parser = Parser(string)
  el = parser.parse_element()
  length = parser.index - 1

  return el, length

def transpile_element(element: "Element", xmlpy_factory: str):
  children = []

  for child in element.children:
    if type(child) == str:
      child = re.sub(r"{ *(.+?) *}", lambda m: '\",%s,\"' % m.group(1), child)
      
      child = child.replace("'", "\\'")
      children.append('"' + child + '"')
    else: children.append(transpile_element(child, xmlpy_factory))
  
  attributes = []

  for attribute in element.attributes.keys():
    value = element.attributes[attribute]
    if value[1]:
      attributes.append("'%s': %s" % (attribute, value[0]))
    else:
      attributes.append("'%s': '%s'" % (attribute, value[0].replace("'", "\\'")))
  
  attrs = "{" + ', '.join(attributes) + "}"
  el_name = f"'{element.name}'" if "<" + element.name + ">" in html_elements else element.name
  return f"{xmlpy_factory}({el_name}, {attrs}, [{', '.join(children)}])"

def __transpile_string(string: str, xmlpy_factory: str):
  code = ""
  
  is_str = False
  str_start = None
  
  ind = 0
  while ind < len(string):
    char = string[ind]

    if char in ['"', "'"] and not is_str:
      str_start = char
      is_str = True
    
    elif char == str_start and is_str and not (len(code) > 0 and code[-1] == "\\"):
      is_str = False

    elif char == "#":
      while string[ind] != "\n":
        ind += 1
      ind += 1
      continue

    elif char == "<" and not is_str:
      try:
        el, length = get_first_element(string[ind:])
        code += transpile_element(el, xmlpy_factory)
        ind += length + 1
        continue
      except Exception as e:
        if "Invalid tag name" not in str(e):
          raise e
    
    code += char
    ind += 1
  
  return code

def transpile_string(content: str, xmlpy_factory: str = None, add_header = True, filename = "<main>"):
  if not xmlpy_factory:
    mtch = re.search(config_factory_regex, content)
    if mtch:
      xmlpy_factory = mtch.group(1)

  output = ""
  if add_header: output += f'# Source: {filename}, generated by xmlpy at {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}\n'

  if not xmlpy_factory:
    xmlpy_factory = "PyElement"
    output += f"""class {xmlpy_factory}:
  def __init__(self, name, attributes, children):
    self.name = name
    self.attributes = attributes
    self.children = children

  def __repr__(self):
    return '<Element %s, %s, %s>' % (self.name, self.attributes, self.children)\n\n"""

  output += __transpile_string(content, xmlpy_factory)

  return output

def transpile_file(filepath: str, xmlpy_factory = None, add_header = True):
  with open(filepath, "r") as f:
    code = f.read()

  return transpile_string(
    code,
    xmlpy_factory=xmlpy_factory,
    add_header=add_header,
    filename=os.path.basename(filepath)
  )